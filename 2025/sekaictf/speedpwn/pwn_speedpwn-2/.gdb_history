}

int main(int argc, char *argv[]) {

    init();
    struct canvas my_canvas = {
        .size_x = 20,
        .size_y = 20,
        .data = malloc(20*20)
    };

    char op, arg3;
    int res, arg1, arg2;
    clear_canvas(my_canvas);

    while(1) {
        print_canvas(my_canvas);
        res = scanf("%1s", &op);
        if(res != 1) { op = '\0'; }
        switch(op) {
            case 'p':
                res = scanf("%d %d %hhx", &arg1, &arg2, &arg3);
                if(res != 3) {
                    puts("Invalid operation. 'h' for help");
                    flush_stdin();
                    break;
                }
                my_canvas.data[arg1*my_canvas.size_y + arg2] = arg3;
                break;
            case 'r':
                res = scanf("%d %d", &arg1, &arg2);
                if(res != 2) {
                    puts("Invalid operation. 'h' for help");
                    flush_stdin();
                    break;
                }

                void *new_data = malloc(arg1 * arg2);
                if(new_data == NULL) {
                    puts("Internal Server Error");
                    exit(1);
                }
                free(my_canvas.data);
                my_canvas.data = new_data;
                my_canvas.size_x = arg2;
                my_canvas.size_y = arg1;
                clear_canvas(my_canvas);
                puts("Canvas Resized and Reset!");
                break;
            case 'h':
                print_help();
                break;
            case 'e':
                puts("Bye");
                return 0;
            default:
                puts("Invalid operation. 'h' for help");
                flush_stdin();
                break;
        }
    }


    return 0;
}
q
r
vis
r
vis
c
vis
r
vis
checksec
r
vis
c
vis
set max-visualize-chunk-size 0x500
vis
r
vis
r
vis
c
vis
c
vis
r
vis
c
r 10 20
vis
c
vis
c
vis
c
vis
vmmap
x/20xg 0x404000
vis
vmmap
c
vis
c
vis
c
ivs
vis
r
vis
c
vis
c
vis
c
vis
c
vis
r
vis
c
vis
c
vis
r
vis
x/20xg 0x405850
c
r
vis
r 
vis
set *(0x405878) = 0x20791
vis
c
vis
c
vis
r
vis
r
vis
c
vis
0x405870r
r
vis
c
vis
c
vis
c
viss
vis
c
vis
r
vis
c
vis
c
vis
c
vis
c
vis
c
vis
0x405870c
c
vis
c
vis
c
vis
r
vis
c
vis
c
vis
p/x 0x405150 - 0x405850
p/d 0x405150 - 0x405850
p/ud 0x405150 - 0x405850
c
p/x -1792/16
p/d -1792/16
r
vis
c
vis
r
got -r
vmmap
x/20xg 0x404000
x/xg 0x404000
b *0x00000000004010c0
c
r
disass main
b *0x00000000004015f9
r
r
vmmap
x/20xg 0x404000
got -r
b *0x401030
c
del break
got -r
b*0x7ffff7c87be0
r
r
del break
r
got -r
b *0x7ffff7c87be0
c
x/xg $rbp-0x78
got -r
b *0x7ffff7c8f470
c
c
c
c
c
list break
break
del break 5
c
c
c
r
del brfeak
del break
r
got -r
break 0x7ffff7c8f470
break *0x7ffff7c8f470
c
c
r
del break
r
got -r
b *0x7ffff7c8f470
c
del break
r
got -r
vmmap
x/20xg 0x404000
checksec
